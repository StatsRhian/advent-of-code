{
  "hash": "725463931f790aeb3da079958c9181dc",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"2024: Day 3\"\ndate: 2024-12-3\ncategories:\n  - python\n  - regex\ndraft: false\n---\n\n\n## Setup\n\n[The original challenge](https://adventofcode.com/2024/day/3)\n\n[My data](input){target=\"_blank\"}\n\n## My thoughts\n\n- I like regex, so this one should be a little more straight forward\n- Seems like {re} is the package for regular expressions in python?\n- The `split()` function was useful here for separating out the two numbers from `mult(123,212)`\n- Need to sort out a nice auto-formatter for formatting python code in my IDE\n\n## Part 1\n\n::: {#60e605d4 .cell execution_count=1}\n``` {.python .cell-code}\nimport re\nimport numpy as np\n\nwith open(\"input\", 'r') as file:\n    # Read the entire content of the file\n    input = file.read()\n```\n:::\n\n\n::: {#995120dd .cell execution_count=2}\n``` {.python .cell-code}\npattern = r'mul\\(\\d{1,3},\\d{1,3}\\)'\nvalid = re.findall(pattern, input)\n```\n:::\n\n\n::: {#63160f8a .cell execution_count=3}\n``` {.python .cell-code}\ndef do_mult(commands):\n    total = 0\n    for i in range(len(commands)):\n        stripped = commands[i][4:len(commands[i])-1]\n        values = np.array(stripped.split(\",\"), dtype=float)\n\n        total = total + np.prod(values)\n    return total\n\ndo_mult(valid)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n179571322.0\n```\n:::\n:::\n\n\n## Part 2\n\n::: {#36d6bb03 .cell execution_count=4}\n``` {.python .cell-code}\npattern = r\"mul\\(\\d{1,3},\\d{1,3}\\)|do\\(\\)|don't\\(\\)\"\nvalid = re.findall(pattern, input)\n```\n:::\n\n\nFor this part I _could_ identify all the multipliers that appear between a do and and a don't and remove them from the valid list. \n\nAnother quick and dirty approach would be to keep track if we're in a do or a don't state as we loop. Which is what I went for. \n\n::: {#c1cb2cdd .cell execution_count=5}\n``` {.python .cell-code}\ndef do_conditional_mult(commands):\n    total = 0\n    state = \"do\"\n\n    for i in range(len(commands)):\n        if commands[i][0:3] == \"mul\":\n            if state == \"do\":\n                stripped = commands[i][4:len(commands[i])-1]\n                values = np.array(stripped.split(\",\"), dtype=float)\n                total = total + np.prod(values)\n        elif commands[i] == \"do()\":\n            state = \"do\"\n        elif commands[i] == \"don't()\":\n            state = \"don't\"\n\n    return total\n```\n:::\n\n\n::: {#52e25fb9 .cell execution_count=6}\n``` {.python .cell-code}\ndo_conditional_mult(valid)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n103811193.0\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}