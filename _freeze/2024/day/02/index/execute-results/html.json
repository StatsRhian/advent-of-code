{
  "hash": "20f88b9e3ee323e7f80700930dcc9794",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"2024: Day 2\"\ndate: 2024-12-2\ncategories:\n  - python\ndraft: false\n---\n\n\n## Setup\n\n[The original challenge](https://adventofcode.com/2024/day/2)\n\n[My data](input){target=\"_blank\"}\n\n## My thoughts\n\n\n\n- Wrote my first Python function ðŸ‘¶\n- \"Read mode\" using `open()`\n- I keep typing `<-` instead of `=`\n- It's `len()` not `length()` \n- I forgot the `:` in the for loop definition\n\n## Part 1\n\n::: {#b6906d0c .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\n# Open the file in read mode\nwith open(\"input\") as file:\n    # Read all lines and store them in a list\n    input = [list(map(int, line.strip().split())) for line in file]\n```\n:::\n\n\nFor each file I want to \n\n- calculate the difference\n- check is it's \"safe\"\n    - diff is either all positive or all negative\n    - Only allowed in \"small steps\" of size 1, 2 or 3\n\n::: {#f1015faf .cell execution_count=2}\n``` {.python .cell-code}\ndef check_safe(file):\n    \"\"\"\n    This function takes a file and returns if it is \"safe\" or not \n    \"\"\"\n    diff = np.diff(file)\n    increasing = np.all(diff > 0)\n    decreasing = np.all(diff < 0)\n    small_steps = np.all(np.isin(abs(diff), np.array([1, 2, 3])))\n\n    safe = (increasing or decreasing) and small_steps\n\n    return safe\n```\n:::\n\n\n::: {#1bb378e6 .cell execution_count=3}\n``` {.python .cell-code}\nsum(list(map(check_safe, input)))\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n486\n```\n:::\n:::\n\n\n## Part 2\n\nI spent a while trying to avoid just brute forcing by looping over removing all possible exception. I found defining those edge cases a bit harder and just looped over the removal instead.\n\n::: {#7220b66a .cell execution_count=4}\n``` {.python .cell-code}\ndef check_safe_tolerant(file):\n    \"\"\"\n    This is a tolerant check which allows one file to be removed. Returns if it is \"safe\" or not \n    \"\"\"\n    if check_safe(file):\n        return True\n    else:\n        is_safe=np.zeros(len(file))\n        for i in range(len(file)):\n            is_safe[i] = check_safe(np.delete(file, i))\n        return any(is_safe)\n```\n:::\n\n\n::: {#77479d01 .cell execution_count=5}\n``` {.python .cell-code}\nsum(list(map(check_safe_tolerant, input)))\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n540\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}